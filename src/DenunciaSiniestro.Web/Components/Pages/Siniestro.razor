@page "/"
@page "/siniestro"
@using System.Text.Json
@using System.Text.Json.Serialization
@using DenunciaSiniestro.Aplicacion
@using DenunciaSiniestro.Aplicacion.Dtos.Request
@using DenunciaSiniestro.Aplicacion.Dtos.Response
@using DenunciaSiniestro.Dominio
@using DenunciaSiniestro.Dominio.Entidades
@using DenunciaSiniestro.Web.Components.ViewModel
@using Sbins.Mediador.Abstracciones
@using System.Threading.Tasks
@rendermode InteractiveServer
@using static System.Net.WebRequestMethods
@inject RecaptchaService RecaptchaService
@inject DenuncioService DenuncioService

<div class="page">
    <main>
        <article class="content px-4">
            <div class="container mt-5">
                @if (_showErrorToast)
                {
                    <div class="toast show align-items-center text-white bg-danger border-0 position-fixed top-0 start-50 translate-middle-x mt-3"
                         role="alert"
                         aria-live="assertive"
                         aria-atomic="true"
                         style="z-index: 1050;">
                        <div class="d-flex">
                            <div class="toast-body">
                                Error: @_errorMessage
                            </div>
                            <button type="button"
                                    class="btn-close btn-close-white me-2 m-auto"
                                    data-bs-dismiss="toast"
                                    aria-label="Close"
                                    @onclick="() => _showErrorToast = false">
                            </button>
                        </div>
                    </div>
                }
                <div class="p-4 border rounded">
                    @* ... (Carga y encabezados) ... *@
                    @if (_ConfiguracionFormulario == null)
                    {
                        <p>Cargando configuración del formulario...</p>
                    }
                    else
                    {
                        @if (_showSuccess)
                        {
                            <div class="text-center p-5 border rounded bg-light">
                                <h2 class="heading-bold text-success mb-4">¡Denuncio Ingresado con Éxito!</h2>
                                <p class="lead">Hemos recibido su denuncia de siniestro.</p>

                                @if (!string.IsNullOrEmpty(_numeroSeguimiento))
                                {
                                    <h3 class="mt-4 text-primary-emphasis">Folio de su Denuncio:</h3>
                                    <p class="display-6"><strong>@_numeroSeguimiento</strong></p>
                                }
                                <button class="btn btn-primary mt-3" @onclick="() => { _showSuccess = false; FormData.Clear(); StateHasChanged(); }">
                                    Realizar otra Denuncia
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="form-container">
                                <img class="mx-auto d-block" src="@_ConfiguracionFormulario.TipoDenuncio.IconoUrl" alt="soap_icon" title="">
                                <h2 class="heading-bold titulos text-primary-emphasis text-center">@_ConfiguracionFormulario.TipoDenuncio.Nombre</h2>
                                <EditForm Model="@FormData" OnValidSubmit="HandleValidSubmit" FormName="dynamicForm">
                                    <DataAnnotationsValidator />
                                    @foreach (var seccion in _ConfiguracionFormulario.Secciones)
                                    {
                                        <div>
                                            <h3 class="t3form">@seccion.Nombre</h3>
                                            <p>@seccion.Descripcion</p>
                                        </div>

                                        @foreach (var campo in seccion.Campos)
                                        {
                                            <div class="form-group">
                                                <label for="@campo.Nombre">@campo.Descripcion @(campo.Requerido ? "*" : "")</label>

                                                @* USO DEL COMPONENTE EXTERNO PARA RENDERIZAR EL CAMPO *@
                                                @if (campo.Nombre.ToLower().Contains("rut"))
                                                {
                                                    <RutInputRenderer Campo="campo"
                                                                      Seccion="seccion"
                                                                      FormData="FormData"
                                                                      OnSetValue="HandleSetValue"
                                                                      GetValueMethod="GetValue" />
                                                }
                                                else
                                                {
                                                    <DynamicFieldRenderer Campo="campo"
                                                                          Seccion="seccion"
                                                                          FormData="FormData"
                                                                          OnSetValue="HandleSetValue"
                                                                          GetValueMethod="GetValue" />
                                                }

                                                @if (campo.Requerido && IsFieldEmpty(seccion.Nombre + campo.Nombre))
                                                {
                                                    <span class="text-danger">Este campo es requerido.</span>
                                                }
                                            </div>
                                        }
                                    }
                                    @* Aquí termina el foreach de secciones y campos *@
                                    <div class="text-center mt-4">
                                        <button type="submit" class="btnSmtForm" disabled="@_isLoading">
                                            @if (_isLoading)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span>Enviando</span>
                                            }
                                            else
                                            {
                                                <span>Enviar</span>
                                            }
                                        </button>
                                    </div>

                                </EditForm>
                            </div>
                        }
                    }
                </div>
            </div>
        </article>
    </main>
</div>

@code {
    private bool _showSuccess = false;
    private ProcesarDenuncioResponse _response = new ProcesarDenuncioResponse();
    private bool _isLoading = false;

    private bool _showErrorToast = false;
    private string _errorMessage = "Ocurrió un error al procesar su denuncia. Por favor, intente nuevamente.";

    private async Task HandleSetValue(KeyValuePair<string, InputRequest> args)
    {
        SetValue(args.Key, args.Value);
    }

    private Dictionary<string, InputRequest> FormData = new Dictionary<string, InputRequest>();

    private ConfiguracionFormulario _ConfiguracionFormulario { get; set; } = default!;

    private string _numeroSeguimiento = string.Empty;

    private InputRequest GetValue(string key) => FormData.TryGetValue(key, out var value) ? value : null;

    private T GetValue<T>(string key)
    {
        if (FormData.TryGetValue(key, out var value) && value is T typedValue)
        {
            return typedValue;
        }
        return default!;
    }

    private void SetValue(string key, InputRequest value)
    {
        if (value.Valor is string strValue && string.IsNullOrEmpty(strValue))
        {
            FormData.Remove(key);
            return;
        }

        if (value.Valor is DateTime dateValue && dateValue == default(DateTime))
        {
            FormData.Remove(key);
            return;
        }

        FormData[key] = value;

        StateHasChanged();
    }

    private bool IsFieldEmpty(string key)
    {
        if (!FormData.ContainsKey(key) || FormData[key] == null)
            return true;

        var inputRequest = FormData[key];

        if (inputRequest.Valor is string strValue)
        {
            return string.IsNullOrWhiteSpace(strValue);
        }

        if (inputRequest.Valor is DateTime dateValue)
        {
            return dateValue == default(DateTime);
        }

        var campo = _ConfiguracionFormulario.Secciones
            .SelectMany(s => s.Campos)
            .FirstOrDefault(c => (c.Nombre == key.Replace(c.Nombre, "")) || (c.Nombre == key.Substring(key.Length - c.Nombre.Length) && c.Nombre.Length == key.Length - key.Replace(c.Nombre, "").Length));


        if (campo != null && (campo.Tipo == TipoCampo.Select || campo.Tipo == TipoCampo.MultiSelect))
        {
            return inputRequest.Valor == null || string.IsNullOrWhiteSpace(inputRequest.Valor.ToString());
        }

        return inputRequest.Valor == null;
    }

    protected override async Task OnInitializedAsync()
    {
        _ConfiguracionFormulario = await DenuncioService.ObtenerConfiguracion(1);
    }

    private async Task HandleValidSubmit()
    {
        if (_isLoading) return;

        if (ValidateAllFields())
        {
            _isLoading = true;
            StateHasChanged(); 

            try
            {
                var token = await RecaptchaService.ValidateToken("denuncia_form");

                if (token)
                {

                    Dictionary<string, InputRequest> data = FormData;

                    ProcesarDenuncioRequest denuncio = new ProcesarDenuncioRequest
                    {
                        TipoDenuncio = _ConfiguracionFormulario.IdTipoDenuncio,
                        Valores = data
                    };

                    _response = await DenuncioService.CrearDenuncio(denuncio);

                    if (_response.Estado == Dominio.Enumeradores.EstadoDenuncio.Ingresado)
                    {
                        _numeroSeguimiento = _response.NumeroSeguimiento;
                        _showSuccess = true;
                    }
                    else
                    {
                        _showErrorToast = true;
                    }
                }
                else
                {
                    _errorMessage = "La validación de seguridad (reCAPTCHA) falló. Por favor, intente nuevamente.";
                    _showErrorToast = true;
                }
            }
            catch (Exception)
            {
                _showErrorToast = true;
            }
            finally
            {
                _isLoading = false;
                StateHasChanged();
            }

        }
        else
        {
            Console.WriteLine("El formulario dinámico tiene campos requeridos vacíos.");
        }
    }

    private bool ValidateAllFields()
    {
        bool isValid = true;
        foreach (var seccion in _ConfiguracionFormulario.Secciones)
        {
            foreach (var campo in seccion.Campos.Where(c => c.Requerido))
            {
                if (IsFieldEmpty(seccion.Nombre + campo.Nombre))
                {
                    isValid = false;
                }
            }
        }
        return isValid;
    }
}
